using UnityEngine;
using M8.Noise.Module;

namespace M8.Noise {
    public struct Models {
        /// <summary>
        /// This model returns an output value from a noise module given the
        /// coordinates of an input value located on the surface of a sphere.
        ///
        /// To generate an output value, pass the (latitude, longitude)
        /// coordinates of an input value to the GetValue() method.
        ///
        /// This model is useful for creating:
        /// - seamless textures that can be mapped onto a sphere
        /// - terrain height maps for entire planets
        ///
        /// This sphere has a radius of 1.0 unit and its center is located at
        /// the origin.
        /// </summary>
        public static float Sphere(ModuleBase module, float lat, float lon) {
            float x, y, z;
            Utils.LatLonToXYZ(lat, lon, out x, out y, out z);
            return module.GetValue(x, y, z);
        }

        /// <summary>
        /// This model returns an output value from a noise module given the
        /// coordinates of an input value located on the surface of a cylinder.
        ///
        /// To generate an output value, pass the (angle, height) coordinates of
        /// an input value to the GetValue() method.
        ///
        /// This model is useful for creating:
        /// - seamless textures that can be mapped onto a cylinder
        ///
        /// This cylinder has a radius of 1.0 unit and has infinite height.  It is
        /// oriented along the @a y axis.  Its center is located at the origin.
        /// </summary>
        public static float Cylinder(ModuleBase module, float angle, float height) {
            float x, y, z;

            float rad = angle*Mathf.Deg2Rad;
            x = Mathf.Cos(rad);
            y = height;
            z = Mathf.Sin(rad);
            return module.GetValue(x, y, z);
        }

        /// <summary>
        /// Returns the output value from the noise module given the
        /// one-dimensional coordinate of the specified input value located
        /// on the line segment.
        /// 
        /// The output value is generated by the noise module passed to the
        /// SetModule() method.  This value may be attenuated (moved toward
        /// 0.0) as t approaches either end of the line segment; this is
        /// the default behavior.
        ///
        /// If the value is not to be attenuated, t can safely range
        /// outside the 0.0 to 1.0 range; the output value will be
        /// extrapolated along the line that this segment is part of.
        /// </summary>
        public static float Line(ModuleBase module, Vector3 p0, Vector3 p1, float t, bool attenuate = true) {
            Vector3 p = Vector3.Lerp(p0, p1, t);
            float val = module.GetValue(p);
            return attenuate ? t*(1.0f - t)*4.0f*val : val;
        }

        /// <summary>
        /// Model that defines the surface of a plane.
        ///
        /// This model returns an output value from a noise module given the
        /// coordinates of an input value located on the surface of an ( x,
        /// z ) plane.
        ///
        /// To generate an output value, pass the ( x, z ) coordinates of
        /// an input value to the GetValue() method.
        ///
        /// This model is useful for creating:
        /// - two-dimensional textures
        /// - terrain height maps for local areas
        ///
        /// This plane extends infinitely in both directions.
        /// </summary>
        public static float Plane(ModuleBase module, float x, float z) {
            return module.GetValue(x, 0f, z);
        }
    }
}