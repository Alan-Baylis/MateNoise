
namespace M8.Noise.Module {
    /// <summary>
    /// Noise module that caches the last output value generated by a source
    /// module.
    ///
    /// If an application passes an input value to the GetValue() method that
    /// differs from the previously passed-in input value, this noise module
    /// instructs the source module to calculate the output value.  This
    /// value, as well as the (x, y, z) coordinates of the input
    /// value, are stored (cached) in this noise module.
    ///
    /// If the application passes an input value to the GetValue() method
    /// that is equal to the previously passed-in input value, this noise
    /// module returns the cached output value without having the source
    /// module recalculate the output value.
    ///
    /// If an application passes a new source module to the sourceModule, 
    /// the cache is invalidated.
    ///
    /// Caching a noise module is useful if it is used as a source module for
    /// multiple noise modules.  If a source module is not cached, the source
    /// module will redundantly calculate the same output value once for each
    /// noise module in which it is included.
    ///
    /// This noise module requires one source module.
    /// </summary>
    public class Cache : ModuleBase {
        public override int sourceModuleCount { get { return 1; } }

        public new ModuleBase this[int ind] {
            set { base[ind] = value; mIsCached = false; }
        }

        public ModuleBase sourceModule { get { return mSourceModules[0]; } set { mSourceModules[0] = value; mIsCached = false; } }

        public override float GetValue(float x, float y, float z) {
            if(!(mIsCached && x == mCachedX && y == mCachedY && z == mCachedZ))
                mCachedValue = mSourceModules[0].GetValue(mCachedX = x, mCachedY = y, mCachedZ = z);
            mIsCached = true;
            return mCachedValue;
        }

        private bool mIsCached = false;
        private float mCachedValue;
        private float mCachedX;
        private float mCachedY;
        private float mCachedZ;
    }
}